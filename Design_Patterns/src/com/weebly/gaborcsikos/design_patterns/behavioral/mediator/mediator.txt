Intent:
Define an object that encapsulates how a set of objects interact. Mediator promotes
loose coupling by keeping objects from referring to each other explicitly, and it lets you
vary their interaction independently.

Use the Mediator pattern when

• a set of objects communicate in well-defined but complex ways. The resulting
interdependencies are unstructured and difficult to understand.
• reusing an object is difficult because it refers to and communicates with many
other objects.
• a behavior that's distributed between several classes should be customizable
without a lot of subclassing.

Benefits:
It limits subclassing.
It decouples colleagues.
It simplifies object protocols.
It abstracts how objects cooperate.
It centralizes control.

Examples:
java.util.Timer (all scheduleXXX() methods)
java.util.concurrent.Executor#execute()
java.util.concurrent.ExecutorService (the invokeXXX() and submit() methods)
java.util.concurrent.ScheduledExecutorService (all scheduleXXX() methods)