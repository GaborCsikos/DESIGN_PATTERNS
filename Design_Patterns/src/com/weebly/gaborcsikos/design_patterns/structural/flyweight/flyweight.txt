Intent:
Use sharing to support large numbers of fine-grained objects efficiently.

Use the flyweight pattern when:
• An application uses a large number of objects.
• Storage costs are high because of the sheer quantity of objects.
• Most object state can be made extrinsic.
• Many groups of objects may be replaced by relatively few shared objects once
extrinsic state is removed.
• The application doesn't depend on object identity. Since flyweight objects may
be shared, identity tests will return true for conceptually distinct objects.


Benefits:

Described in intent.

Examples:
java.lang.Integer#valueOf(int) (also on Boolean, Byte, Character, Short, Long and BigDecimal)
