Intent:
Provide a surrogate or placeholder for another object to control access to it.

The Proxy pattern introduces a level of indirection when accessing an object. The
additional indirection has many uses, depending on the kind of proxy:
1. A remote proxy can hide the fact that an object resides in a different address
space.
2. A virtual proxy can perform optimizations such as creating an object on demand.
3. Both protection proxies and smart references allow additional housekeeping
tasks when an object is accessed.


Benefits:

1. A remote proxy provides a local representative for an object in a different
address space. 
2. A virtual proxy creates expensive objects on demand. 
3. A protection proxy controls access to the original object. Protection proxies are
useful when objects should have different access rights. 
4. A smart reference is a replacement for a bare pointer that performs additional
actions when an object is accessed. Typical uses include
o counting the number of references to the real object so that it can be
freed automatically.

The Proxy pattern introduces a level of indirection when accessing an object. The
additional indirection has many uses, depending on the kind of proxy:
1. A remote proxy can hide the fact that an object resides in a different address
space.
2. A virtual proxy can perform optimizations such as creating an object on demand.
3. Both protection proxies and smart references allow additional housekeeping
tasks when an object is accessed.

Examples:
java.lang.reflect.Proxy
java.rmi.*, the whole API actually.

